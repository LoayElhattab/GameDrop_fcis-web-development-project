// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  username      String    @unique @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.Text
  role          String    @default("CUSTOMER") @db.VarChar(50)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @updatedAt @db.Timestamptz(6)

  cart          Cart?
  orders        Order[]
  reviews       Review[]
}

model Product {
  id             String      @id @default(uuid()) @db.Uuid
  title          String      @db.VarChar(255)
  description    String?     @db.Text
  platform       String      @db.VarChar(100)
  genre          String      @db.VarChar(100)
  price          Decimal     @db.Decimal(10, 2)
  stock_quantity Int         @default(0)
  cover_image_url String?    @db.Text
  release_date   DateTime?   @db.Date
  created_at     DateTime    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime    @updatedAt @db.Timestamptz(6)
  is_deleted    Boolean  @default(false)

  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        Review[]
}

model Cart {
  id         String     @id @default(uuid()) @db.Uuid
  user_id    String     @unique @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @updatedAt @db.Timestamptz(6)

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      CartItem[]
}

model CartItem {
  id         String     @id @default(uuid()) @db.Uuid
  cart_id    String     @db.Uuid
  product_id String     @db.Uuid
  quantity   Int
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @updatedAt @db.Timestamptz(6)

  cart       Cart       @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id])
}

model Order {
  id                     String      @id @default(uuid()) @db.Uuid
  user_id                String?     @db.Uuid
  total_amount           Decimal     @db.Decimal(10, 2)
  status                 String      @default("PENDING") @db.VarChar(50)
  shipping_address_line1 String      @db.Text
  shipping_address_line2 String?     @db.Text
  shipping_city          String      @db.VarChar(100)
  shipping_postal_code   String      @db.VarChar(20)
  shipping_country       String      @db.VarChar(100)
  created_at             DateTime    @default(now()) @db.Timestamptz(6)
  updated_at             DateTime    @updatedAt @db.Timestamptz(6)

  user                   User?       @relation(fields: [user_id], references: [id], onDelete: SetNull)
  items                  OrderItem[]
}

model OrderItem {
  id                String    @id @default(uuid()) @db.Uuid
  order_id          String    @db.Uuid
  product_id        String    @db.Uuid
  quantity          Int
  price_at_purchase Decimal   @db.Decimal(10, 2)
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)

  order             Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [product_id], references: [id], onDelete: Restrict)
}

model Review {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  product_id String    @db.Uuid
  rating     Int
  comment    String?   @db.Text
  review_date DateTime @default(now()) @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)

  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
}

